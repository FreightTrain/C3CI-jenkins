<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Deploy an App to make sure we permit pushes of large apps using a large amount of disk space.</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>300</daysToKeep>
    <numToKeep>50</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JOB_INFRASTRUCTURE_DIR</name>
          <description>Name of the infrastructure directory from which your &lt;a href=&quot;https://github.com/cloudfoundry/nyet#running-without-existing-organization&quot;&gt;NYET environment&lt;/a&gt; will be read.&lt;br&gt;
Ie: ${CONFIG_REPO}/infrastructures/${INFRASTRUCTURE_DIR}/cf/nyet_ci.sh</description>
          <defaultValue>${INFRASTRUCTURE_DIR}</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEST_APP_REPO</name>
          <description>The repo for the application we are going to deploy. Defaults to the spring-music example from CloudFoundry
Git clone will use the current directory (which is a UUID based temp dir per-run) so no dir change is needed in the TEST_APP_BUILDSTEP</description>
          <defaultValue>https://github.com/FreightTrain/cf-test-app-disk-usage.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEST_APP_BUILDSTEP</name>
          <description>The build command used before pushing this application.

</description>
          <defaultValue>mvn clean package</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEST_APP_STARTPATH</name>
          <description>The -p option passed to the &apos;cf push&apos; command for locating a war (in the case of a java buildpack). </description>
          <defaultValue>target/large-disk-test-java.war</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <se.diabol.jenkins.pipeline.PipelineProperty plugin="delivery-pipeline-plugin@0.8.6">
      <taskName>Test Large Disk App</taskName>
      <stageName>Test</stageName>
    </se.diabol.jenkins.pipeline.PipelineProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.22">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.2.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/FreightTrain/C3CI-private</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>true</recursiveSubmodules>
        <trackingSubmodules>true</trackingSubmodules>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!bash -e

GITHUB_BASE_URL=&quot;${GIT_URL}/tree/${GIT_COMMIT}&quot;
GITHUB_NYET_ENV_URL=&quot;${GITHUB_BASE_URL}/infrastructures/${JOB_INFRASTRUCTURE_DIR}/cf/nyet_ci.sh&quot;

echo &quot;***********************&quot;
echo &quot;CUSTOM CRUD APPS TARGET: &lt;a href=&apos;${GITHUB_NYET_ENV_URL}&apos;&gt;nyet_ci.sh&lt;/a&gt;&quot;
echo &quot;***********************&quot;
echo &quot;${DESC}&quot; 
echo &quot;***********************&quot;

APPTESTUUID=&quot;disk-test-app-`date | md5sum | awk -F&quot; &quot; &apos;{print $1}&apos;`&quot;
echo &quot;USING ${APPTESTUUID} for tmp directories and space name&quot;

source infrastructures/${JOB_INFRASTRUCTURE_DIR}/cf/nyet_ci.sh
echo &quot;API Target: ${NYET_TARGET}&quot;
mkdir ${APPTESTUUID}
cd ${APPTESTUUID}

echo &quot;Cloning REPO: ${TEST_APP_REPO}&quot;
git clone ${TEST_APP_REPO} build

echo &quot;***************&quot;
echo &quot;***BUILDING***&quot;
echo &quot;**************&quot;

cd build
${TEST_APP_BUILDSTEP}

echo &quot;*************&quot;
echo &quot;TARGETING CF  &quot;
echo &quot;*************&quot;

echo &quot;Removing existing manifest&quot;
rm -fv manifest.yml

cf --version
cf api --skip-ssl-validation ${NYET_TARGET}
cf login -u ${NYET_ADMIN_USERNAME} -p ${NYET_ADMIN_PASSWORD}

echo &quot;CREATING ORG ${APPTESTUUID}&quot;
cf create-org ${APPTESTUUID}
echo &quot;CREATING SPACE ${APPTESTUUID}&quot;
cf create-space ${APPTESTUUID} -o ${APPTESTUUID}
cf target -o ${APPTESTUUID} -s ${APPTESTUUID}

echo &quot;*************&quot;
echo &quot;PUSHING APP  &quot;
echo &quot;*************&quot;

cf push ${APPTESTUUID} -p ${TEST_APP_STARTPATH} -d `echo ${NYET_TARGET} | awk -F&quot;api.&quot; &apos;{print $2}&apos;` -m 2G 

echo &quot;****************&quot;
echo &quot;BASIC APP TEST   &quot;
echo &quot;****************&quot;
export APPDNSNAME=${APPTESTUUID}.`echo ${NYET_TARGET} | awk -F&quot;api.&quot; &apos;{print $2}&apos;`
if [ &quot;\`wget http://${APPDNSNAME} -O /dev/null -S --quiet 2&gt;&amp;1 | grep &apos;200 OK&apos;\`&quot; != &quot;&quot; ]; 
then 
   echo &quot;/ response 200 OK!&quot; 
else
   echo &quot;/ response not 200. Check Deployment!!&quot;
   exit 1
fi;

if [ &quot;\`wget http://${APPDNSNAME}/data -O /dev/null -S --quiet 2&gt;&amp;1 | grep &apos;200 OK&apos;\`&quot; != &quot;&quot; ]; 
then 
   echo &quot;/data response 200 OK!&quot; 
else
   echo &quot;/data response not 200. Check Deployment!!&quot;
   exit 1
fi;


cf delete -f ${APPTESTUUID}
cf delete-org -f ${APPTESTUUID}
exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>