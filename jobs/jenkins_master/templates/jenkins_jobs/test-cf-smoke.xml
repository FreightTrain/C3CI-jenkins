<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Run the &lt;a href=&quot;https://github.com/cloudfoundry-incubator/cf-smoke-tests&quot;&gt;Cloud Foundry Smoke Tests&lt;/a&gt; against Cloud Foundry.&lt;br&gt;</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>300</daysToKeep>
    <numToKeep>50</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JOB_INFRASTRUCTURE_DIR</name>
          <description>Name of the infrastructure directory from which your &lt;a href=&quot;https://github.com/cloudfoundry/nyet#running-without-existing-organization&quot;&gt;NYET environment&lt;/a&gt; will be read.&lt;br&gt;
Ie: ${CONFIG_REPO}/infrastructures/${INFRASTRUCTURE_DIR}/cf/nyet_ci.sh</description>
          <defaultValue>${INFRASTRUCTURE_DIR}</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <se.diabol.jenkins.pipeline.PipelineProperty plugin="delivery-pipeline-plugin@0.8.6">
      <taskName>Run CF SMOKE Tests</taskName>
      <stageName>Validate</stageName>
    </se.diabol.jenkins.pipeline.PipelineProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.22">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.2.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>${CONFIG_REPO}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${CONFIG_REPO_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>true</recursiveSubmodules>
        <trackingSubmodules>true</trackingSubmodules>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!bash -e

# Generate a config file to run a particular smoke test suite
function generate_config_file() {

if [ ! ${NYET_TARGET} ]; then
    echo &quot;NYET_TARGET missing from nyet_ci.sh.&quot; &amp;&amp; exit 1
fi
if [ ! ${NYET_APPS_DOMAIN} ]; then
    echo &quot;NYET_APPS_DOMAIN  missing from nyet_ci.sh.&quot; &amp;&amp; exit 1
fi
if [ ! ${NYET_ADMIN_USERNAME} ]; then
    echo &quot;NYET_ADMIN_USERNAME  missing from nyet_ci.sh.&quot; &amp;&amp; exit 1
fi
if [ ! ${NYET_ADMIN_PASSWORD} ]; then
    echo &quot;NYET_ADMIN_PASSWORD  missing from nyet_ci.sh.&quot; &amp;&amp; exit 1
fi

cat &gt; &quot;${WORKSPACE}/smoke_config.json&quot; &lt;&lt;EOF
{
  &quot;suite_name&quot;: &quot;CF-Smoke-Tests&quot;,
  &quot;api&quot;: &quot;${NYET_TARGET}&quot;,
  &quot;apps_domain&quot;: &quot;${NYET_APPS_DOMAIN}&quot;,
  &quot;user&quot;: &quot;${NYET_ADMIN_USERNAME}&quot;,
  &quot;password&quot;: &quot;${NYET_ADMIN_PASSWORD}&quot;,
  &quot;org&quot;: &quot;smoke-test&quot;,
  &quot;space&quot;: &quot;smoke-test&quot;,
  &quot;use_existing_org&quot;: false,
  &quot;use_existing_space&quot;: false,
  &quot;logging_app&quot;: &quot;&quot;,
  &quot;runtime_app&quot;: &quot;&quot;,
  &quot;skip_ssl_validation&quot;: true
}
EOF

export CONFIG=&quot;${WORKSPACE}/smoke_config.json&quot;

}

echo &quot; &quot; 
echo &quot;Running setup tasks required before running tests...&quot;
echo &quot;***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****&quot;
echo &quot; &quot; 

# Setup golang 
# Also make sure we do not have any old binaries in our GOPATH
which go
export GOROOT=&quot;/var/vcap/packages/golang&quot;
echo &quot;GOROOT is ${GOROOT}&quot;
go version
echo &quot;Setting up GOPATH...&quot;
export GOPATH=${WORKSPACE}/gopath
if [[ -d ${GOPATH} ]]; then 
  rm -rf ${GOPATH}
fi
mkdir -p &quot;${GOPATH}&quot;
export GOPATH=&quot;${GOPATH}:${WORKSPACE}/cf-release/src/acceptance-tests/Godeps/_workspace&quot;
echo &quot;GOPATH is ${GOPATH}&quot;

# Use the version of the smoke tests pinned in C3CI
cd ${WORKSPACE}/C3CI/cf-smoke-tests

source ${WORKSPACE}/infrastructures/${JOB_INFRASTRUCTURE_DIR}/cf/nyet_ci.sh

echo &quot; &quot;
echo &quot;Creating config file to run smoke tests...&quot;
echo &quot; - See: https://github.com/cloudfoundry-incubator/cf-smoke-tests/blob/master/smoke/config.go&quot;

generate_config_file

export CF_TRACE_BASENAME=&quot;cf_trace_&quot;
local_gopath=$PWD/Godeps/_workspace
mkdir -p $local_gopath/bin
export GOPATH=$local_gopath:$GOPATH
export PATH=$local_gopath/bin:$PATH

go install -v github.com/onsi/ginkgo/ginkgo

echo &quot; &quot; 
echo &quot;Running SMOKE tests...&quot;
echo &quot;***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****&quot;
ginkgo -r -slowSpecThreshold=300
rm ${CONFIG}
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.25">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
          </configs>
          <projects>deploy-custom-crud-apps, deploy-disk-test-app</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>